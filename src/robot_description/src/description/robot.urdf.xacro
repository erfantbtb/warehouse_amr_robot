<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="AGV5">
    <!-- Define robot constants -->
    <xacro:property name="base_width" value="0.660"/>
    <xacro:property name="base_length" value="0.890"/>
    <xacro:property name="base_height" value="0.265"/>

    <xacro:property name="wheel_radius" value="0.10"/>
    <xacro:property name="wheel_width" value="0.38"/>

    <xacro:property name="wheel_ygap" value="-0.1"/>
    <xacro:property name="wheel_zoff" value="0.0"/>
    <xacro:property name="wheel_xoff" value="0.0"/>

    <!-- Base footprint (used for mapping and navigation) -->
    <link name="base_footprint">     
    </link>
    
    <!-- Defining Main Body of robot -->
    <link name="base_link">
        <inertial>
            <origin
              xyz="-0.000123231100652682 0.0553961365561796 0.0171432137554972"
              rpy="0 0 0" />
            <mass
              value="7.19116955235277" />
            <inertia
              ixx="0.441209434736245"
              ixy="-1.27470215920327E-06"
              ixz="-0.0017"
              iyy="0.654363133888033"
              iyz="-0.00684903683061138"
              izz="0.249410032162092" />
          </inertial>
        <visual name="">
            <origin xyz="0.0 0.0 0.0" rpy="${pi/2} 0.0 ${pi/2}"/>
            <geometry>
                <mesh filename="file://$(find robot_description)/src/meshes/agv_base_link.STL" scale="1 1 1"/>
            </geometry>
            <material name="">
                <color rgba="1.0 0.0 0.0 1.0"/>
                <texture filename=""/>
            </material>
        </visual>
        <collision>
            <origin xyz="0.0 0.0 0.0" rpy="${pi/2} 0.0 ${pi/2}"/>
            <geometry>
                <mesh filename="file://$(find robot_description)/src/meshes/agv_base_link.STL" scale="1 1 1"/>
            </geometry>
        </collision>
    </link>

    <!-- Fixing basefootprint and base_link -->
    <joint name="base_footprint_to_base_link" type="fixed">
        <parent link="base_link"/>
        <child link="base_footprint"/>
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
    </joint>

    <!-- Drive Wheels -->
  <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 ${pi/2}"/>
        <geometry>
          <mesh filename="file://$(find robot_description)/src/meshes/DW_R.STL" scale="1 1 1"/>
        </geometry>
        <material name="Gray">
          <color rgba="0.5 0.5 0.5 1.0"/>
        </material>
      </visual>
      <collision>
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 ${pi/2}"/>
        <geometry>
          <!-- Using a cylinder as a simplified collision model for the wheel -->
          <mesh filename="file://$(find robot_description)/src/meshes/DW_R.STL" scale="1 1 1"/>
        </geometry>
      </collision>
      <inertial>
        <origin
          xyz="-2.77555756156289E-17 0 0"
          rpy="0 0 0" />
        <mass
          value="21.1289138446402" />
        <inertia
          ixx="0.0951175890712612"
          ixy="1.19812781954787E-18"
          ixz="5.0120682772178E-20"
          iyy="0.0624867717452084"
          iyz="-4.3653823928575E-08"
          izz="0.0624865212718915" />
      </inertial>
    </link>
    <joint name="${prefix}_joint" type="continuous">
        <parent link="base_link"/>
        <child link="${prefix}_link"/>
        <origin xyz="${-1*x_reflect*wheel_xoff} ${-1*y_reflect*(base_width/2+wheel_ygap)} ${wheel_zoff}" rpy="0 0 0"/>
        <axis xyz="0 1 0"/>
      </joint>
    </xacro:macro>

    <!-- Drive Wheel Instance -->
    <xacro:wheel prefix="drive_wheel_left" x_reflect="-1" y_reflect="-1" />
    <xacro:wheel prefix="drive_wheel_right" x_reflect="-1" y_reflect="1" />
    
    
    <!-- Caster Wheels -->
    <xacro:macro name="caster_wheel" params="prefix x_offset y_offset z_offset">
      <!-- Frame -->
      <link name="${prefix}_frame">
        <inertial>
          <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
          <mass value="0.1"/>
          <inertia ixx="0.0" ixy="0.0" ixz="0.0" iyy="0.0" iyz="0.0" izz="0.0"/>
        </inertial>
        <visual name="">
          <origin xyz="0.0 0.0 0.0" rpy="${pi/2} 0.0 ${pi/2}"/>
          <geometry>
            <mesh filename="file://$(find robot_description)/src/meshes/caster_wheel_frame.STL" scale="1.0 1.0 1.0"/>
          </geometry>
          <material name="">
            <color rgba="1.0 0.0 0.0 1.0"/>
          </material>
        </visual>
        <collision>
          <origin xyz="0.0 0.0 0.0" rpy="${pi/2} 0.0 ${pi/2}"/>
          <geometry>
            <mesh filename="file://$(find robot_description)/src/meshes/caster_wheel_frame.STL" scale="1.0 1.0 1.0"/>
          </geometry>
        </collision>
      </link>

      <!-- Wheel -->
      <link name="${prefix}">
        <inertial>
          <origin
            xyz="0 0 0"
            rpy="0 0 0" />
          <mass
            value="0.359205022961183" />
          <inertia
            ixx="0.000758344332671333"
            ixy="-2.28486478848757E-19"
            ixz="-6.0425181258677E-18"
            iyy="0.000401507997406102"
            iyz="-1.40478542475118E-19"
            izz="0.000401507997406102" />
        </inertial>
        <visual name="">
          <origin xyz="0.0 0.0 0.0" rpy="${pi/2} 0.0 ${pi/2}"/>
          <geometry>
            <mesh filename="file://$(find robot_description)/src/meshes/caster_wheel.STL" scale="1.0 1.0 1.0"/>
          </geometry>
          <material name="">
            <color rgba="1.0 0.0 0.0 1.0"/>
          </material>
        </visual>
        <collision>
          <origin xyz="0.0 0.0 0.0" rpy="${pi/2} 0.0 ${pi/2}"/>
          <geometry>
            <mesh filename="file://$(find robot_description)/src/meshes/caster_wheel.STL" scale="1.0 1.0 1.0"/>
          </geometry>
        </collision>
      </link>

      <!-- Joints -->
      <joint name="${prefix}_to_${prefix}_frame" type="continuous">
        <parent link="${prefix}_frame"/>
        <child link="${prefix}"/>
        <axis xyz="0 1 0"/>
        <origin xyz="-0.04 0.0 -0.08" rpy="0 0 0"/>
      </joint>

      <joint name="${prefix}_frame_to_base_link" type="continuous">
        <parent link="base_link"/>
        <child link="${prefix}_frame"/>
        <axis xyz="0 0 1"/>
        <origin xyz="${x_offset} ${y_offset} 0.05" rpy="0 0 0"/>
      </joint>
    </xacro:macro>

    <!-- Caster Wheel Instance -->
    <xacro:caster_wheel prefix="caster_front_left" x_offset="0.40" y_offset="0.24" z_offset="0.0"/>
    <xacro:caster_wheel prefix="caster_front_right" x_offset="0.40" y_offset="-0.24" z_offset="0.0"/>
    <xacro:caster_wheel prefix="caster_rear_left" x_offset="-0.40" y_offset="0.24" z_offset="0.0"/>
    <xacro:caster_wheel prefix="caster_rear_right" x_offset="-0.40" y_offset="-0.24" z_offset="0.0"/>    

    <!-- Lidar Link -->
    <link name="lidar_front">
      <inertial>
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
        <mass value="0.1"/>
        <inertia ixx="0.0" ixy="0.0" ixz="0.0" iyy="0.0" iyz="0.0" izz="0.0"/>
      </inertial>
      <visual name="">
        <origin xyz="0.0 0.0 0.0" rpy="${-pi/2} 0.0 ${pi/2}"/>
        <geometry>
          <box size="0.1 0.1 0.1"/>
        </geometry>
        <material name="">
          <color rgba="1.0 0.0 0.0 1.0"/>
          <texture filename=""/>
        </material>
      </visual>
      <collision>
        <origin xyz="0.0 0.0 0.0" rpy="${-pi/2} 0.0 ${pi/2}"/>
        <geometry>
          <box size="0.1 0.1 0.1"/>
        </geometry>
      </collision>
    </link>

    <joint name="lidar_front_to_base_link" type="fixed">
      <parent link="base_link"/>
      <child link="lidar_front"/>
      <origin xyz="0.4 0.0 0.22" rpy="0.0 0.0 0.0"/>
    </joint>

    <gazebo>
      <plugin name="diff_drive" filename="libgazebo_ros_diff_drive.so">
        <left_joint>drive_wheel_left_joint</left_joint>
        <right_joint>drive_wheel_right_joint</right_joint>
        <wheel_separation>0.38</wheel_separation>
        <wheel_diameter>0.1</wheel_diameter>
  
        <max_wheel_torque>200</max_wheel_torque>
        <max_wheel_acceleration>10.0</max_wheel_acceleration>
  
        <odometry_frame>odom</odometry_frame>
        <robot_base_frame>base_link</robot_base_frame>
  
        <publish_odom>true</publish_odom>
        <publish_odom_tf>true</publish_odom_tf>
        <publish_wheel_tf>true</publish_wheel_tf>
      </plugin>
    </gazebo>
  
    <!-- Joint state publisher plugin -->
    <gazebo>
      <plugin name="diff_robot_joint_state" filename="libgazebo_ros_joint_state_publisher.so">
        <ros>
          <remapping>~/out:=joint_states</remapping>
        </ros>
        <update_rate>30</update_rate>
        <joint_name>drive_wheel_left_joint</joint_name>
        <joint_name>drive_wheel_right_joint</joint_name>
      </plugin>
    </gazebo>
  
    <!-- 3D lidar sensor-->  
    <gazebo reference="lidar_front">
      <material>Gazebo/Red</material>
  
      <sensor type="ray" name="velodyne2-HDL32E">
        <pose>0 0 0 0 0 0</pose>
        <visualize>false</visualize>
        <update_rate>50</update_rate>
  
        <ray>
              <scan>
                  <horizontal>
                      <samples>360</samples>
                      <resolution>1</resolution>
                      <min_angle>-3.142</min_angle>
                      <max_angle>3.142</max_angle>
                  </horizontal>
                  <vertical>
                      <samples>32</samples>
                      <resolution>1</resolution>
                      <min_angle> 0 </min_angle>
                      <max_angle> 1.57</max_angle>
                  </vertical>
              </scan>
  
              <range>
                  <min>0.15</min>
                  <max>30.0</max>
                  <resolution>0.01</resolution>
              </range>
  
              <noise>
                  <type>gaussian</type>
                  <mean>0.0</mean>
                  <stddev>0.0</stddev>
              </noise>
        </ray>
  
        <plugin name="gazebo_ros_laser_controller" filename="libgazebo_ros_ray_sensor.so">
          <ros>
            <namespace>/ray</namespace>
            <remapping>~/out:=lidar_points</remapping>
          </ros>
          <!-- Output as a PointCloud2, see above for other types -->
          <output_type>sensor_msgs/PointCloud2</output_type>
          <!-- Clip intensity values so all are above 100, optional -->
          <min_intensity>100.0</min_intensity>
          <!-- Frame id for header of output, defaults to sensor's parent link name -->
          <frame_name>lidar_front</frame_name>
        </plugin>
  
      </sensor>
    </gazebo>

</robot>